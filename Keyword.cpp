1 alignas: 指定类型或对象的对齐要求
2 alignof: 查询类型的对齐要求
3 and: 逻辑与运算符的替代表示
4 and_eq: 按位与赋值运算符的替代表示
5 asm: 用于嵌入汇编代码
6 auto: 用于类型推导，声明变量时根据初始化表达式自动推导类型
7 bitand: 按位与运算符的替代表示
8 bitor: 按位或运算符的替代表示
9 bool: 布尔类型
10 break: 跳出循环或switch语句
11 case: switch语句中的一个分支
12 catch: 异常处理，捕获异常
13 char: 字符类型
14 char8_t: 用于表示UTF-8字符的类型(C++20引入)
15 char16_t: 用于表示UTF-16字符的类型
16 char32_t: 用于表示UTF-32字符的类型
17 class: 声明一个类
18 compl: 按位取反运算符的替代表示
19 const: 定义常量，或指定函数不修改对象
20 constexpr: 声明常量表达式，在编译时求值
21 const_cast: 用于修改类型的const或volatile属性
22 continue: 跳过当前循环的剩余代码，开始下一次循环
23 decltype: 查询表达式的类型
24 default: switch语句中的默认分支，或显式默认生成的特殊成员函数
25 delete: 释放动态分配的内存，或禁止函数的使用
26 do: 循环语句，至少执行一次循环体
27 double: 双精度浮点类型
28 dynamic_cast: 在继承层次结构中进行安全的向下转换
29 else: if语句的备用分支
30 enum: 声明枚举类型
31 explicit: 禁止构造函数或转换函数的隐式转换
32 export: 用于模板声明，现在很少使用
33 extern: 声明变量或函数在其他地方定义
34 false: 布尔类型的假值
35 float: 单精度浮点类型
36 for: 循环语句
37 friend: 声明友元函数或类
38 goto: 无条件跳转语句
39 if: 条件语句
40 inline: 建议编译器将函数内联展开
41 int: 整型
42 long: 长整型或长双精度浮点型
43 mutable: 允许在const成员函数中修改的类成员
44 namespace: 声明命名空间
45 new: 动态分配内存
46 not: 逻辑非运算符的替代表示
47 not_eq: 不等于运算符的替代表示
48 nullptr: 空指针常量
49 operator: 重载运算符
50 or: 逻辑或运算符的替代表示
51 or_eq: 按位或赋值运算符的替代表示
52 private: 声明类成员的私有访问权限
53 protected: 声明类成员的保护访问权限
54 public: 声明类成员的公共访问权限
55 register: 建议编译器将变量存储在寄存器中(C++17弃用)
56 reinterpret_cast: 用于低级的重新解释类型转换
57 return: 从函数返回
58 short: 短整型
59 signed: 有符号整型
60 sizeof: 查询类型或对象的大小
61 static: 静态存储期或内部链接
62 static_assert: 编译时断言
63 static_cast: 用于非多态类型转换
64 struct: 声明结构体
65 switch: 多路选择语句
66 template: 声明模板
67 this: 指向当前对象的指针
68 throw: 抛出异常
69 true: 布尔类型的真值
70 try: 异常处理，尝试执行可能抛出异常的代码块
71 typedef: 定义类型别名
72 typeid: 查询类型信息
73 typename: 声明模板中的类型名,或用于替代class声明模板参数
74 union: 声明联合体
75 unsigned: 无符号整型
76 using: 引入命名空间成员或定义类型别名
77 virtual: 声明虚函数
78 void: 无类型
79 volatile: 指定对象可能被意外修改，禁止优化
80 wchar_t: 宽字符类型
81 while: 循环语句
82 xor: 按位异或运算符的替代表示
83 xor_eq: 按位异或赋值运算符的替代表示